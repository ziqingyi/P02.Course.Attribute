<?xml version="1.0" encoding="utf-8" ?>
<configuration>
<configSections>
  <section name ="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration"/>
</configSections>
<unity>
  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration"/>
  <containers>
      <container name="aopContainer">
        <extension type="Interception"/>

        <register type="P18.Course.MyAOP.UnityAOPFolder.IUnityUserProcessor,P18.Course.MyAOP" 
                  mapTo="P18.Course.MyAOP.UnityAOPFolder.UnityUserProcessor,P18.Course.MyAOP">
          
          <interceptor type="InterfaceInterceptor"/>
          <!--extend based on interface (method (use virtual), class (extend MarshalByRefObject))  -->
          <!--all the method in the interface will go into below first-->
          <interceptionBehavior type="P18.Course.MyAOP.UnityAOPFolder.ExceptionLoggingBehavior,P18.Course.MyAOP"/>
          <interceptionBehavior type="P18.Course.MyAOP.UnityAOPFolder.MonitorBehavior,P18.Course.MyAOP"/>

          <interceptionBehavior type="P18.Course.MyAOP.UnityAOPFolder.CachingBehavior,P18.Course.MyAOP"/>
          <interceptionBehavior type="P18.Course.MyAOP.UnityAOPFolder.LogBeforeBehavior,P18.Course.MyAOP"/>
          <interceptionBehavior type="P18.Course.MyAOP.UnityAOPFolder.ParameterCheckBehavior,P18.Course.MyAOP"/>

          <interceptionBehavior type="P18.Course.MyAOP.UnityAOPFolder.LogAfterBehavior,P18.Course.MyAOP"/>

          <!--class name ,    DLL name,not name space name, the project name is  P18.Course.MyAOP -->
        </register>


      </container>
    </containers>
</unity>
</configuration>